PartType output;
PartType scar;
PartType promoter;

output YFP(.SEQUENCE("CTGAAGCTGTCACCGGATGTGCTTTCCGGTCTGATGAGTCCGTGAGGACGAAACAGCCTCTACAAATAATTTTGTTTAATACTAGAGAAAGAGGGGAAATACTAGATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATCTGCACCACAGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCTTCGGCTACGGCCTGCAATGCTTCGCCCGCTACCCCGACCACATGAAGCTGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCAATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTTAGCTACCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAACTCGGTACCAAATTCCAGAAAAGAGGCCTCCCGAAAGGGGGGCCTTTTTTCGTTTTGGTCC"));
promoter pBM3R1(.SEQUENCE("AATCCGCGTGATAGGTCTGATTCGTTACCAATTGACGGAATGAACGTTCATTCCGATAATGCTAGC"));
scar Cscar(.SEQUENCE("aatg"));
scar Escar(.SEQUENCE("gctt"));

Device _device(
   promoter,
   YFP
);

Rule _rules ( ON _device:
   CONTAINS pBM3R1 AND 
   STARTSWITH pBM3R1 AND
   ALL_FORWARD
);


_devices        = product(_device);

Device gate_();

Device circuit();

Rule allRules( ON circuit:
   gate_        EXACTLY 1 AND 
   ALL_FORWARD AND 
   Escar        EXACTLY 1 AND 
   Cscar        EXACTLY 1 AND 
   FORWARD Escar AND 
   FORWARD Cscar AND 
   [0] EQUALS Escar AND 
   [2] EQUALS Cscar
);

Array allResults;

for(num i1=0;  i1<sizeof(_devices);        i1=i1+1) {

gate_        = _devices[i1];

Device circuit(
   gate_,
   Escar,
   Cscar
);

result = permute(circuit);

allResults = allResults + result;

}
